Перем СписокТрекеров;
Перем СоответствиеИменПолей;

Перем мПоказыватьНастройки;
Перем мТекПозицияВДереве;
Перем мТекПозицияВСписке;
Перем Алфавит;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ДЕЙСТВИЙ ФОРМЫ

Процедура ДействияФормыЗакрыть(Кнопка)
	Закрыть();
КонецПроцедуры

Процедура ДействияФормыПолучитьСписокПроектов(Кнопка)
	
	СформироватьДеревоПроектовТрекера();
	
КонецПроцедуры

Процедура ДействияФормыПолучитьСписокПользователей(Кнопка)
	
	СформироватьДеревоПользователейТрекера();	
	
КонецПроцедуры

Процедура ДействияФормыПолучитьСписокДопПолей(Кнопка)
	
	СформироватьДеревоДопПолейТрекера();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ

//ДеревоПроектовЗадач

Процедура КоманднаяПанельДеревоПроектовЗадачСвернутьВсе(Кнопка)
	ТекСтрока = ЭлементыФормы.ДеревоПроектовЗадач.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда 
		ЭлементыФормы.ДеревоПроектовЗадач.Свернуть(ТекСтрока);		
	Иначе
		Для Каждого СтрокаДерева Из ДеревоПроектовЗадач.Строки Цикл
			ЭлементыФормы.ДеревоПроектовЗадач.Свернуть(СтрокаДерева);		
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельДеревоПроектовЗадачРазвернутьВсе(Кнопка)
	ТекСтрока = ЭлементыФормы.ДеревоПроектовЗадач.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда 
		ЭлементыФормы.ДеревоПроектовЗадач.Развернуть(ТекСтрока, Истина);		
	Иначе
		Для Каждого СтрокаДерева Из ДеревоПроектовЗадач.Строки Цикл
			ЭлементыФормы.ДеревоПроектовЗадач.Развернуть(СтрокаДерева, Истина);		
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

//СписокЗадач

Процедура КоманднаяПанельСписокЗадачОбновитьСписок(Кнопка)
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
		
	Отборы = СформироватьПараметрыЗапросаПолученияДанныхСТрекера(ЭтаФорма.ЭлементыФормы);
	Отборы = Отборы + "&include=journals,changesets";
	ДанныеРесурса = ПолучитьДанныеРесурсаИзТрекера("issues", Отборы);
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Заполняем дерево проектов/задач
	ЗаполнитьДеревоПоДаннымРесурсаИзТрекера(ДанныеРесурса, ДеревоПроектовЗадач, "issues", "ДеревоПроектовЗадач" , Истина);
	
	// Заполнить таблицу задач
	//ЗаполнитьСписокЗадач_(ДанныеРесурса);
	ЗаполнитьСписокЗадач(ДанныеРесурса);
	
	// Развернуть дерево задач
	КоманднаяПанельДеревоПроектовЗадачРазвернутьВсе(Неопределено);

	// Установить фокус на задачу которая редактировалась 
	УстановитьФокус();
	
	Инициализация();  // параметров для редактирования задач
	ПерезаполнитьКнопкиВариантовРедактированияЗадач();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачДобавить(Кнопка)
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
		
	Инициализация();	
	
	УстановитьПоляЗадачиПоУмолчанию();
	
	СвойстваЗадачи = Новый Структура;
	
	ТекСтрокаСписка = Элементы.ДеревоПроектовЗадач.ТекущиеДанные;
	Если ТекСтрокаСписка <> Неопределено И ТекСтрокаСписка.Идентификатор <> 0 Тогда
		
		// Это подзадача ?
		Ответ = Вопрос("Хотите добавить подзадачу к выбранной задаче - " + ТекСтрокаСписка.ПроектЗадача + " ?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СвойстваЗадачи.Вставить("НомерРродительскойЗадачи", ТекСтрокаСписка.Идентификатор);
		КонецЕсли;
		
		// Установим проект
		СтрокаПроект = ВернутьПервогоРодителяСтроки(ТекСтрокаСписка);
		СвойстваЗадачи.Вставить("Проект", СтрокаПроект.ПроектЗадача);
		
		// Заполним список возможных "Настраиваемых полей"
		мНастраиваемыеПоля = тНастраиваемыеПоля.СкопироватьКолонки();
		
		Для Каждого СтруктураПоля Из ТекСтрокаСписка.НастраиваемыеПоля Цикл
			нСтрока = мНастраиваемыеПоля.Добавить();
			
			нСтрока.Идентификатор = СтруктураПоля.Значение.id;
			нСтрока.Имя = СтруктураПоля.Значение.name;
		КонецЦикла;
		СвойстваЗадачи.Вставить("НастраиваемыеПоля", мНастраиваемыеПоля);
	Иначе
		Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля() + ", Проект"), "Добавить задачу",, ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваЗадачи.Вставить("НомерРродительскойЗадачи", 0);
		СвойстваЗадачи.Вставить("Проект", Проект);
	КонецЕсли;
	СвойстваЗадачи.Вставить("Трекер",     "Bug");
	СвойстваЗадачи.Вставить("Приоритет",  "Normal");
	СвойстваЗадачи.Вставить("Статус",     "New");
	
	ОткрытьФорму("ФормаЗадачиУправляемая",СвойстваЗадачи,ЭтаФорма,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачРедактировать(Кнопка)
	
	Если ЕстьФлажки() Тогда

		Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
			Возврат;
		КонецЕсли;
		
		Инициализация();	
		
		ФормаРедактирования = ПолучитьФорму("ФормаРедактирования", ЭтаФорма, ЭтаФорма);
		
		ИзмененныеСвойства = ФормаРедактирования.ОткрытьМодально();
		Если ИзмененныеСвойства = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		табЗадач = ПолучитьРезультатОтбораСпискаЗадач().Выгрузить();
		Для Каждого СтрокаСписка Из табЗадач Цикл
			
			Если Не СтрокаСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачаПроект = Проект;
			НомерРодителя = 0;
			ТекСтрокаСписка = ДеревоПроектовЗадач.Строки.Найти(СтрокаСписка.Идентификатор, "Идентификатор", Истина);
			Если ТекСтрокаСписка <> Неопределено И ТекСтрокаСписка.Идентификатор <> 0 Тогда
				ЗадачаПроект = ВернутьПервогоРодителяСтроки(ТекСтрокаСписка).ПроектЗадача;
				НомерРодителя = ТекСтрокаСписка.Родитель.Идентификатор; 
			КонецЕсли;
				
			// Перешел на заполнение задачи по данным с трекера
			ЗадачаНомер				= СтрокаСписка.Идентификатор;
			ЗадачаОписание			= СтрокаСписка.Описание;
			ЗадачаТема				= СтрЗаменить(СтрокаСписка.Тема, СимволОтступа, "");
			
			ЗадачаПроект			= ?(ИзмененныеСвойства.Свойство("Проект"),                ИзмененныеСвойства.Проект, ЗадачаПроект);
			ЗадачаТрекер			= ?(ИзмененныеСвойства.Свойство("Трекер"),                ИзмененныеСвойства.Трекер, СтрокаСписка.Трекер);
			ЗадачаПриоритет			= ?(ИзмененныеСвойства.Свойство("Приоритет"),             ИзмененныеСвойства.Приоритет, СтрокаСписка.Приоритет);
			ЗадачаСтатус			= ?(ИзмененныеСвойства.Свойство("Статус"),                ИзмененныеСвойства.Статус, СтрокаСписка.Статус);
			ЗадачаИсполнитель		= ?(ИзмененныеСвойства.Свойство("Исполнитель"),           ИзмененныеСвойства.Исполнитель, СтрокаСписка.Исполнитель);
			ЗадачаКомментарии		= ?(ИзмененныеСвойства.Свойство("Комметарий"),            ИзмененныеСвойства.Комметарий, "");
			
			ЗадачаНачалоВыполнения	= ?(ИзмененныеСвойства.Свойство("ДатаНачала"),            ИзмененныеСвойства.ДатаНачала, СтрокаСписка.ДатаНачала);
			ЗадачаКонецВыполнения	= ?(ИзмененныеСвойства.Свойство("ДатаВыполнения"),        ИзмененныеСвойства.ДатаВыполнения, СтрокаСписка.ДатаВыполнения);

			ЗадачаНомерРродительскойЗадачи		= ?(ИзмененныеСвойства.Свойство("НомерРодителя"),    	  ИзмененныеСвойства.НомерРодителя, НомерРодителя);
			
			Результат = ОбновитьЗадачуВТрекере();
			
			Если ОтчетоВыполнении.ЕстьОшибки Тогда
				Сообщить(ОтчетоВыполнении.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		КоманднаяПанельСписокЗадачОбновитьСписок(Неопределено);
		
	Иначе
		ТекЗадача = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
		Если ТекЗадача = Неопределено Или ТекЗадача.Идентификатор = 0 Тогда
			Сообщить("Не выбрана задача для редактирования!", СтатусСообщения.Информация);
			Возврат;	
		КонецЕсли;
		
		ОткрытьФормуЗадачиДляРедактирования(ТекЗадача.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачУдалить(Кнопка)
	
	Если Не мПолныеПрава Тогда
		ЭлементыФормы.Информация.Заголовок = "Удаление задач запрещено!";
		Возврат;
	КонецЕсли;
	
	ТекСтрока = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или ТекСтрока.Идентификатор = 0 Тогда
		Возврат; // Удалять нечего
	КонецЕсли;
	
	Ответ = Вопрос("Задача " + ТекСтрока.Трекер + " #" + Формат(ТекСтрока.Идентификатор,"ЧГ=0") + " будет безвозвратно удалена. Подтверждаете выбранное действие?" , РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалитьЗадачуИзТрекера(ТекСтрока.Идентификатор) Тогда
		КоманднаяПанельСписокЗадачОбновитьСписок(ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.ОбновитьСписок);
	КонецЕсли;
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачПоказатьСкрытьОписание(Кнопка)
	
	НастройкиФормы.ПоказатьДполнительнуюПанель = НЕ НастройкиФормы.ПоказатьДполнительнуюПанель;
	
	ПоказатьСкрытьДполнительнуюПанель();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачУстановитьФлажки(Кнопка)
	табЗадач = ПолучитьРезультатОтбораСпискаЗадач().Выгрузить();
	Для Каждого СтрокаТаблицы Из табЗадач Цикл
		СтрокаСписка = СписокЗадач.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаСписка <> Неопределено Тогда
			СтрокаСписка.Пометка = Истина;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачСнятьФлажки(Кнопка)
	табЗадач = ПолучитьРезультатОтбораСпискаЗадач().Выгрузить();
	Для Каждого СтрокаТаблицы Из табЗадач Цикл
		СтрокаСписка = СписокЗадач.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаСписка <> Неопределено Тогда
			СтрокаСписка.Пометка = Ложь;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачСкопироватьВБуфер(Кнопка)
	СтрокаПорт = ?(Порт = 80, "", ":" + Формат(Порт, "ЧГ=0"));
	
	ТекСтрока = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		ВставитьТекстВБуферОбмена("http://" + Сервер + СтрокаПорт + "/issues/"+Формат(ТекСтрока.Идентификатор, "ЧГ=0"));
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЗадачПерейти(Кнопка)
	СтрокаПорт = ?(Порт = 80, "", ":" + Формат(Порт, "ЧГ=0"));
	
	Если Найти(Кнопка.Имя, "СписокЗадач") Тогда

		ТекСтрока = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
		Если Не ТекСтрока = Неопределено Тогда
			
			СтрокаДерева = ДеревоПроектовЗадач.Строки.Найти(ТекСтрока.Идентификатор, "Идентификатор", Истина);
			Если СтрокаДерева <> Неопределено И СтрокаДерева.Идентификатор <> 0 Тогда
				мПроект = ВернутьПервогоРодителяСтроки(СтрокаДерева).ПроектЗадача;
				
				ИдПроекта = ПолучитьИдентификаторПараметра(мПроект, "projects");
				ЗапуститьПриложение("http://" + Сервер + СтрокаПорт + "/projects/p"+Формат(ИдПроекта-1, "ЧЦ=3; ЧВН=; ЧГ=0") + "/issues");
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСтрока = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
		Если Не ТекСтрока = Неопределено Тогда
			ЗапуститьПриложение("http://" + Сервер + СтрокаПорт + "/issues/"+Формат(ТекСтрока.Идентификатор, "ЧГ=0"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Подменю "Изменить" 

Процедура ИзменитьСвойстваВыбранныхЗадач(Кнопка)
	
	Если НЕ ЕстьФлажки() Тогда
		ВыделеннаяСтрока = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
		Если Не ВыделеннаяСтрока = Неопределено Тогда
			ВыделеннаяСтрока.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();	
	
	ИмяСвойства = Лев(Кнопка.Имя, Найти(Кнопка.Имя, "_") - 1);
	
	ИзмененныеСвойства = Новый Структура(ИмяСвойства, Кнопка.Текст);
	
	табЗадач = ПолучитьРезультатОтбораСпискаЗадач().Выгрузить();
	Для Каждого СтрокаСписка Из табЗадач Цикл
		
		Если Не СтрокаСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачаПроект = Проект;
		НомерРодителя = 0;
		ТекСтрокаСписка = ДеревоПроектовЗадач.Строки.Найти(СтрокаСписка.Идентификатор, "Идентификатор", Истина);
		Если ТекСтрокаСписка <> Неопределено И ТекСтрокаСписка.Идентификатор <> 0 Тогда
			ЗадачаПроект = ВернутьПервогоРодителяСтроки(ТекСтрокаСписка).ПроектЗадача;
			НомерРодителя = ТекСтрокаСписка.Родитель.Идентификатор; 
		КонецЕсли;
		
		// Перешел на заполнение задачи по данным с трекера
		ЗадачаНомер				= СтрокаСписка.Идентификатор;
		ЗадачаОписание			= СтрокаСписка.Описание;
		ЗадачаТема				= СтрЗаменить(СтрокаСписка.Тема, СимволОтступа, "");
		
		ЗадачаПроект			= ЗадачаПроект;
		ЗадачаТрекер			= ?(ИзмененныеСвойства.Свойство("Трекер"),        ИзмененныеСвойства.Трекер, СтрокаСписка.Трекер);
		ЗадачаПриоритет			= ?(ИзмененныеСвойства.Свойство("Приоритет"),     ИзмененныеСвойства.Приоритет, СтрокаСписка.Приоритет);
		ЗадачаСтатус			= ?(ИзмененныеСвойства.Свойство("Статус"),        ИзмененныеСвойства.Статус, СтрокаСписка.Статус);
		ЗадачаИсполнитель		= ?(ИзмененныеСвойства.Свойство("Исполнитель"),   ИзмененныеСвойства.Исполнитель, СтрокаСписка.Исполнитель);
		ЗадачаКомментарии		= "";
		
		ЗадачаНачалоВыполнения	= СтрокаСписка.ДатаНачала;
		ЗадачаКонецВыполнения	= ?(ИзмененныеСвойства.Свойство("ДатаВыполнения"),        ИзмененныеСвойства.ДатаВыполнения, СтрокаСписка.ДатаВыполнения);
		
		ЗадачаНомерРродительскойЗадачи		= НомерРодителя;
		
		Результат = ОбновитьЗадачуВТрекере();
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	КоманднаяПанельСписокЗадачОбновитьСписок(Неопределено);
	
КонецПроцедуры

Функция ЕстьФлажки()
	
	Для Каждого Задача Из СписокЗадач Цикл
		Если Задача.Пометка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

//ПанельНастроек

Процедура КоманднаяПанельПанелиНастроекНастройкаПанелиПользователя(Кнопка)
	
	НастроитьСтраницыПанелиПользователя(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПанелиНастроекЗакрытьПанельНастроек(Кнопка)
	
	КнопкаПанельНастроек = ЭлементыФормы.КоманднаяПанельНастройки.Кнопки.Настройки;
	КнопкаПанельНастроек.Пометка = Не КнопкаПанельНастроек.Пометка;
	УправлениеОтображениемПанелиПользователя();

КонецПроцедуры

//Настройки

Процедура КоманднаяПанельНастройкиНастройки(Кнопка)
	Кнопка.Пометка = Не Кнопка.Пометка;
	УправлениеОтображениемПанелиПользователя();
КонецПроцедуры

//ДополнительнаяПанель

Процедура ДополнительнаяПанельОставитьКомментарийКЗадачеНажатие(Элемент)
	
	ТекущаяЗадача = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
	Если ТекущаяЗадача = Неопределено Тогда
		Сообщить("Выберите задачу!");
		Возврат;
	КонецЕсли;
	
	ЗадачаНомер						= ТекущаяЗадача.Идентификатор;
	ЗадачаНомерРродительскойЗадачи	= ТекущаяЗадача.НомерРодителя;
	ЗадачаПримечание				= Примечание;
	
	Если НЕ ВсеРеквизитыЗаполнены(Новый Структура("ЗадачаНомер, ЗадачаПримечание"), Элемент.Заголовок) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбновитьЗадачуВТрекере();
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗадачаНомер						= 0;
	ЗадачаНомерРродительскойЗадачи	= 0;
	ЗадачаПримечание				= "";
	Примечание						= "";
	
КонецПроцедуры

Процедура ДополнительнаяПанельДобавитьЗаписьОЗатраченомВремениНажатие(Элемент)
	
	ТекущаяЗадача = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
	Если ТекущаяЗадача = Неопределено Тогда
		Сообщить("Выберите задачу!");
		Возврат;
	КонецЕсли;
	
	ЗадачаНомер						= ТекущаяЗадача.Идентификатор;
	ЗадачаНомерРродительскойЗадачи	= ТекущаяЗадача.НомерРодителя;
	ЗадачаКомментарии				= Комментарии;
	ЗадачаДеятельность				= Деятельность;
	ЗадачаЗатраченноеВремя			= ЗатраченноеВремя;
	
	Если НЕ ВсеРеквизитыЗаполнены(Новый Структура("ЗадачаНомер, ЗадачаДеятельность, ЗадачаЗатраченноеВремя"), Элемент.Заголовок) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеОЗатраченномВремениПоЗадаче();
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗатраченноеВремя				= 0;
	Комментарии						= "";
	
	мТекПозицияВСписке = ТекущаяЗадача.Идентификатор;
	КоманднаяПанельСписокЗадачОбновитьСписок(Неопределено);
	
КонецПроцедуры

// ДействияФормы

Процедура ДействияФормыНомерЗадачиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуЗадачиДляРедактирования(НомерЗадачи);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗАНАЧЕНИЯ

Процедура ПроверкаСоединенияНажатие(Элемент)
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
		
	Данные = ПолучитьДанныеРесурсаИзТрекера("projects");
	
	Если НЕ ОтчетоВыполнении.ЕстьОшибки Тогда
		
		Если Данные["projects"].Количество() = 0 Тогда
			ОтчетоВыполнении.ТекстОшибки = "Список проектов, полученный из трекера, пуст, добавьте проект или обратитесь к администратору для проверки прав доступа в системе Redmine для текущего пользователя.";
			ОтчетоВыполнении.ЕстьОшибки = Истина;
		КонецЕсли;
		
		Инициализация(Истина, ?(Проект<>"", Проект, Неопределено));
	Иначе
		ТекстОшибки = ?(ОтчетоВыполнении.ЕстьОшибки, ОтчетоВыполнении.ТекстОшибки, "Проверьте адрес сервера или данные учетной записи пользователя!");
		Предупреждение(ТекстОшибки, , "Соединение с сервером не выполнено!");
		УспешнаяИнициализация = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры


Процедура ОткрытьФормуЗадачиДляРедактирования(мНомерЗадачи) Экспорт
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
		
	Инициализация();	
	
	УстановитьПоляЗадачиПоУмолчанию();
	
	Отборы = "&include=attachments,changesets,watchers,children,journals";
	ДанныеРесурса = ПолучитьДанныеРесурсаИзТрекера("issues/"+Формат(мНомерЗадачи,"ЧГ=0")+"", Отборы);
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки + Символы.ПС + "Задача с номером: " + мНомерЗадачи + " в трекере не обнаржеа!" );
		Возврат;
	КонецЕсли;
	
	ФормаЗадачи = ПолучитьФорму("ФормаЗадачи", ЭтаФорма, Формат(мНомерЗадачи,"ЧГ=0"));
	ФормаЗадачи.СтруктураЗадачи	= ДанныеРесурса.issue;
	ФормаЗадачи.НоваяЗадача		= Ложь;
	ФормаЗадачи.Открыть();
	
КонецПроцедуры


Функция ВернутьПервогоРодителяСтроки(СтрокаДерева)
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат СтрокаДерева;
	Иначе
		Возврат ВернутьПервогоРодителяСтроки(СтрокаДерева.Родитель);
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьСкрытьДполнительнуюПанель()
	
	ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.ПоказатьСкрытьДполнительнуюПанель.Пометка = НастройкиФормы.ПоказатьДполнительнуюПанель;
	
	КолонкаОписание = ЭлементыФормы.СписокЗадач.Колонки.Найти("Описание");
	Если КолонкаОписание <> Неопределено Тогда
		КолонкаОписание.Видимость = НЕ НастройкиФормы.ПоказатьДполнительнуюПанель;	
	КонецЕсли;
	
	УправлениеОтображениемДополнительнойПанели();

КонецПроцедуры

Процедура ПерезаполнитьСписокЗапросов()
		
	Данные = ЗагруженныеДанные.Получить("queries");
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюЗапросы = ЭлементыФормы.КоманднаяПанельДеревоПроектовЗадач.Кнопки.Запросы;
	ПодменюЗапросы.Кнопки.Очистить();
	
	спКнопок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		мПроект = ПолучитьИдентификаторПараметра(Проект, "projects");
	КонецЕсли;
	
	Для Каждого Запрос Из Данные["queries"] Цикл
		Если НЕ Запрос.Свойство("project_id") Тогда
			спКнопок.Добавить(Запрос.id, Запрос.name);
		КонецЕсли;
		Если мПроект <> Неопределено И Запрос.Свойство("project_id") И Запрос.project_id = мПроект Тогда
			спКнопок.Добавить(Запрос.id, Запрос.name);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Кнопка Из спКнопок Цикл
		КнопкаНажатие = Новый Действие("ОбновитьСписокЗадачПоЗапросу");
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие; 
		
		НоваяКнопка = ПодменюЗапросы.Кнопки.Добавить("Запрос_"+Формат(Кнопка.Значение, "ЧГ=0"), ТипКнопки,  Кнопка.Представление,КнопкаНажатие);
		НоваяКнопка.Картинка = БиблиотекаКартинок.СтартБизнесПроцесса; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьКнопкиВариантовРедактированияЗадач()
	
	СтруктураПодменю = Новый Структура("trackers, issue_statuses, issue_priorities", 
										"Трекер", "Статус", "Приоритет");
	
	ПодменюИзменить = ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.Изменить;
	
	Для Каждого КиЗ Из СтруктураПодменю Цикл
		Кнопка = ПодменюИзменить.Кнопки.Найти(КиЗ.Значение);
		Если Кнопка <> Неопределено Тогда
			ПодменюИзменить.Кнопки.Удалить(Кнопка);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого КиЗ Из СтруктураПодменю Цикл
		
		// Новое подменю
		НовоеПодменю = ПодменюИзменить.Кнопки.Добавить(КиЗ.Значение, ТипКнопкиКоманднойПанели.Подменю, КиЗ.Значение);
	
		Данные = ЗагруженныеДанные.Получить(КиЗ.Ключ);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из Данные[КиЗ.Ключ] Цикл
			КнопкаНажатие = Новый Действие("ИзменитьСвойстваВыбранныхЗадач");
			ТипКнопки = ТипКнопкиКоманднойПанели.Действие; 
			
			НоваяКнопка = НовоеПодменю.Кнопки.Добавить(КиЗ.Значение + "_" + СтрокаДанных["name"], ТипКнопки, СтрокаДанных["name"], КнопкаНажатие);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьСписокЗадачПоЗапросу(Кнопка)
	
	ИдЗапроса = Число(Прав(Кнопка.Имя, СтрДлина(Кнопка.Имя) - 7));
	
	КоманднаяПанельСписокЗадачОбновитьСписок(Неопределено);

КонецПроцедуры


Функция СформироватьДеревоПроектовТрекера()
	
	Ресурс = "projects";
	
	//: ЗагруженныеДанные = Новый Соответствие
	Если ЗагруженныеДанные.Получить(Ресурс) = Неопределено Или ПовторноеПолучаниеДанных Тогда
		
		ДанныеРесурса = ПолучитьДанныеРесурсаИзТрекера(Ресурс);
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить(Ресурс, ДанныеРесурса);
	Иначе
		ДанныеРесурса = ЗагруженныеДанные.Получить(Ресурс);
	КонецЕсли;
	
	ЗаполнитьДеревоПоДаннымРесурсаИзТрекера(ДанныеРесурса, СформироватьДерево(Ресурс), Ресурс, "ДеревоДанных");
	
	ЭлементыФормы.РамкаГруппыДеревоДанных.Заголовок = Ресурс;
	
	Возврат Истина;
КонецФункции

Функция СформироватьДеревоПользователейТрекера()
	
	Ресурс = "users";
	
	//: ЗагруженныеДанные = Новый Соответствие
	Если ЗагруженныеДанные.Получить(Ресурс) = Неопределено Или ПовторноеПолучаниеДанных Тогда
		
		ДанныеРесурса = ПолучитьДанныеРесурсаИзТрекера(Ресурс);
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить(Ресурс, ДанныеРесурса);
	Иначе
		ДанныеРесурса = ЗагруженныеДанные.Получить(Ресурс);
	КонецЕсли;
	
	ЗаполнитьДеревоПоДаннымРесурсаИзТрекера(ДанныеРесурса, СформироватьДерево(Ресурс), Ресурс, "ДеревоДанных");
	
	ЭлементыФормы.РамкаГруппыДеревоДанных.Заголовок = Ресурс;
	
	Возврат Истина;
КонецФункции

Функция СформироватьДеревоДопПолейТрекера()
	
	Ресурс = "custom_fields";
	
	//: ЗагруженныеДанные = Новый Соответствие
	Если ЗагруженныеДанные.Получить(Ресурс) = Неопределено Или ПовторноеПолучаниеДанных Тогда
		
		ДанныеРесурса = ПолучитьДанныеРесурсаИзТрекера(Ресурс, СформироватьПараметрыЗапросаПолученияДанныхСТрекера(ЭтаФорма.ЭлементыФормы));
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить(Ресурс, ДанныеРесурса);
	Иначе
		ДанныеРесурса = ЗагруженныеДанные.Получить(Ресурс);
	КонецЕсли;
	
	ЗаполнитьДеревоПоДаннымРесурсаИзТрекера(ДанныеРесурса, СформироватьДерево(Ресурс), Ресурс, "ДеревоДанных");
	
	ЭлементыФормы.РамкаГруппыДеревоДанных.Заголовок = Ресурс;
	
	Возврат Истина;
КонецФункции


Процедура ЗаполнитьСписокЗначенийПоМассиву(Список, Массив)
	Для Каждого Эл Из Массив Цикл
		Список.Добавить(Эл);
	КонецЦикла;
КонецПроцедуры


Процедура ЗаполнитьСписокЗадач_(ДанныеРесурса)
	
	СписокЗадач.Очистить();
	
	Для Каждого Выборка Из ДанныеРесурса["issues"] Цикл // Обход по массиву данных ресурса
		
		// Добавление данных подчиненных родителю
		нСтрока	= СписокЗадач.Добавить();
		Для Каждого Колонка Из ЭлементыФормы.СписокЗадач.Колонки Цикл
			ИмяПоляВТрекере = СоответствиеИменПолей.Получить(Колонка.Имя);
			Если ИмяПоляВТрекере = Неопределено Тогда // тогда не заполняем такое поле
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Свойство(ИмяПоляВТрекере) Тогда
				Если ТипЗнч(Выборка[ИмяПоляВТрекере]) = Тип("Структура") Тогда
					Если Выборка[ИмяПоляВТрекере].Свойство("name") Тогда
						нСтрока[Колонка.Имя] = Выборка[ИмяПоляВТрекере].name;
					Иначе
						нСтрока[Колонка.Имя] = Выборка[ИмяПоляВТрекере].id;
					КонецЕсли;
				Иначе
					Если ТипЗнч(нСтрока[Колонка.Имя]) = Тип("Дата") Тогда
						нСтрока[Колонка.Имя] = ФорматироватьСтрокуВДату(Выборка[ИмяПоляВТрекере]);
					Иначе
						нСтрока[Колонка.Имя] = Выборка[ИмяПоляВТрекере];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СписокЗадач.Сортировать("Идентификатор Возр");
	
КонецПроцедуры


Функция ФорматироватьСтрокуВДату(Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СтрЗаменить(Значение, ".", "");
	Значение = СтрЗаменить(Значение, "-", "");
	Значение = СтрЗаменить(Значение, ":", "");
	Значение = СтрЗаменить(Значение, "T", "");
	Значение = СтрЗаменить(Значение, "Z", "");
	
	Возврат Дата(Значение);
КонецФункции



Процедура ОформлениеДерева(Знач Дерево, Знач ТабличноеПоле)
	
	Перем СтрокаДерева;
	
	Дерево.Строки.Сортировать("Идентификатор", Истина);
	
	ЭлементыФормы[ТабличноеПоле].Значение = Дерево;
	
	ЭлементыФормы[ТабличноеПоле].СоздатьКолонки();
	
	КолонкаИдПроекта = ЭлементыФормы[ТабличноеПоле].Колонки.Найти("ИдентификаторПроекта");
	Если КолонкаИдПроекта <> Неопределено Тогда
		ЭлементыФормы[ТабличноеПоле].Колонки.ИдентификаторПроекта.Видимость = Ложь;
	КонецЕсли;	
	КолонкаИдПроекта = ЭлементыФормы[ТабличноеПоле].Колонки.Найти("Идентификатор");
	Если КолонкаИдПроекта <> Неопределено Тогда
		ЭлементыФормы[ТабличноеПоле].Колонки.Идентификатор.Видимость = Ложь;
	КонецЕсли;	
	
	ЭлементыФормы.ДеревоПроектовЗадач.Колонки.ПроектЗадача.ЭлементУправления.МногострочныйРежим = Истина;

	ЭлементыФормы[ТабличноеПоле].ГоризонтальныеЛинии	= Истина;
	ЭлементыФормы[ТабличноеПоле].ВертикальныеЛинии		= Истина;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ЭлементыФормы[ТабличноеПоле].Развернуть(СтрокаДерева, Истина); // Развернем все строки
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДерево(ВидДерева)
	
	Дерево = Новый ДеревоЗначений;
	Если ВидДерева = "issues" Тогда
		Дерево.Колонки.Добавить("ПроектЗадача",           ПолучитьОписаниеТиповСтроки(100), "Проект/Задача", 100);
		Дерево.Колонки.Добавить("Идентификатор",          ПолучитьОписаниеТиповЧисла(5,0), 	"Номер задачи", 10);
		//Дерево.Колонки.Добавить("Тема",                   ПолучитьОписаниеТиповСтроки(150), "Тема");
		//Дерево.Колонки.Добавить("Описание",               ПолучитьОписаниеТиповСтроки(1000),"Описание");
		//Дерево.Колонки.Добавить("Статус",                 ПолучитьОписаниеТиповСтроки(100),, 20);
		//Дерево.Колонки.Добавить("Приоритет",              ПолучитьОписаниеТиповСтроки(100),, 20);
		//Дерево.Колонки.Добавить("Трекер",                 ПолучитьОписаниеТиповСтроки(100),, 20);
		//Дерево.Колонки.Добавить("Исполнитель",            ПолучитьОписаниеТиповСтроки(100),, 30);
		//Дерево.Колонки.Добавить("ОценкаВремени",          ПолучитьОписаниеТиповЧисла(10,2),, 10);
		//Дерево.Колонки.Добавить("ПроцентВыполнения",      ПолучитьОписаниеТиповЧисла(10,2),, 10);
		//Дерево.Колонки.Добавить("ДополнительныеПоля",   ,, 10);
		//Дерево.Колонки.Добавить("ДатаНачала",             ПолучитьОписаниеТиповСтроки(100),, 20);
		//Дерево.Колонки.Добавить("ДатаВыполнения",         ПолучитьОписаниеТиповСтроки(100),, 20);
		Дерево.Колонки.Добавить("ИдентификаторПроекта",   ПолучитьОписаниеТиповЧисла(5,0), 	"Ид. проекта", 10);
	ИначеЕсли ВидДерева = "projects" Тогда
		Дерево.Колонки.Добавить("НазваниеПроекта",        ПолучитьОписаниеТиповСтроки(100),	"Название проета", 30);
		Дерево.Колонки.Добавить("Описание",               ПолучитьОписаниеТиповСтроки(1000), 	"Описание", 50);
		Дерево.Колонки.Добавить("Идентификатор",          ПолучитьОписаниеТиповЧисла(5,0), 	"Идентификатор", 10);
	ИначеЕсли ВидДерева = "users" Тогда
		Дерево.Колонки.Добавить("Идентификатор",          ПолучитьОписаниеТиповЧисла(5,0), 	"Идентификатор", 10);
		Дерево.Колонки.Добавить("Имя",                    ПолучитьОписаниеТиповСтроки(100), 	"Имя", 20);
		Дерево.Колонки.Добавить("Фамилия",                ПолучитьОписаниеТиповСтроки(100), 	"Фамилия", 20);
		Дерево.Колонки.Добавить("Логин",                  ПолучитьОписаниеТиповСтроки(100), 	"Логин", 20);
		Дерево.Колонки.Добавить("Почта",                  ПолучитьОписаниеТиповСтроки(100), 	"Почта", 20);
		Дерево.Колонки.Добавить("ДатаСоздания",           ПолучитьОписаниеТиповСтроки(100), 	"Создан", 10);
		Дерево.Колонки.Добавить("ДатаАвторизации",        ПолучитьОписаниеТиповСтроки(100), 	"Авторизировался", 10);
	ИначеЕсли ВидДерева = "custom_fields" Тогда
		Дерево.Колонки.Добавить("Идентификатор",          ПолучитьОписаниеТиповЧисла(5,0), 	"Идентификатор", 10);
		Дерево.Колонки.Добавить("ИмяПоля",                ПолучитьОписаниеТиповСтроки(100), 	"Имя поля", 20);
		Дерево.Колонки.Добавить("ТипКастомизации",        ПолучитьОписаниеТиповСтроки(100), 	"Тип кастомизации", 20);
		Дерево.Колонки.Добавить("ФорматПоля",             ПолучитьОписаниеТиповСтроки(100), 	"Формат поля", 20);
		Дерево.Колонки.Добавить("МинДлина",               ПолучитьОписаниеТиповСтроки(100), 	"Мин. длина", 20);
		Дерево.Колонки.Добавить("МаксДлина",              ПолучитьОписаниеТиповСтроки(100), 	"Макс. длина", 10);
		Дерево.Колонки.Добавить("ЗначениеПоУмолчанию",    ПолучитьОписаниеТиповСтроки(100), 	"По умолчанию", 10);
		Дерево.Колонки.Добавить("Видимость",              ПолучитьОписаниеТиповСтроки(100), 	"Видимость", 10);
		Дерево.Колонки.Добавить("Обязательный",           ПолучитьОписаниеТиповСтроки(100), 	"Обязательное", 10);
		Дерево.Колонки.Добавить("Фильтруется",            ПолучитьОписаниеТиповСтроки(100), 	"Фильтруется", 10);
		Дерево.Колонки.Добавить("УчаствуетВПоиске",       ПолучитьОписаниеТиповСтроки(100), 	"Участвует в поиске", 10);
	КонецЕсли;
	
	Возврат Дерево;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	НастройкиФормы = ВосстановитьЗначение(Метаданные().Имя+"_НастройкиФормы");
	ВосстановитьНастройкиФормы(ЭтаФорма);
	
	Если ИнициализацияПриСтарте Тогда 
		
		Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
			Возврат;
		КонецЕсли;
		
		Если Инициализация(Истина, Проект) Тогда
			ЗаполнитьСписокВыбораПроекта();
			ПерезаполнитьСписокЗапросов();
			ЗаполнитьТаблицуНастраиваемыхПолей();
		Иначе
			УспешнаяИнициализация = Ложь;
			Сообщить("Не удалось инициализировать парметры трекера, проверьте настройки соединения с трекером!");	
		КонецЕсли;		
	КонецЕсли;		
	
	УстановитьВидимость();
	УстановитьЗаголовок();
	УстановитьДоступность();
	УправлениеОтображениемПанелиПользователя();

	Если ФорматированиеТекста = "" Тогда
		ФорматированиеТекста = "none";
	КонецЕсли;
	
	УстановитьОписаниеЗадачиHTML();

КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормы(ЭтаФорма);
	СохранитьЗначение(Метаданные().Имя+"_НастройкиФормы", НастройкиФормы);
	
	ЗагруженныеДанные = Неопределено;
	
КонецПроцедуры


Процедура ЗаполнитьСписокВыбораПроекта()
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
	
	//: ЗагруженныеДанные = Новый Соответствие
	Данные = ЗагруженныеДанные.Получить("projects");
	
	Если Данные = Неопределено Тогда
		Данные = ПолучитьДанныеРесурсаИзТрекера("projects");
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить("projects", Данные);
	КонецЕсли;
	
	мСписокПроектов = Новый СписокЗначений;
	Для Каждого ДанныеПроекта Из Данные["projects"] Цикл
		Если ДанныеПроекта.STATUS = 1 Тогда // открытые проекты
			мСписокПроектов.Добавить(ДанныеПроекта.name);
		КонецЕсли;	
	КонецЦикла;
	
	ЭлементыФормы.Проект.СписокВыбора	= мСписокПроектов;
	
КонецПроцедуры


Процедура ЗаполнитьСписокВыбораИсполнителей()
	//: ЗагруженныеДанные = Новый Соответствие
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля() + ", Проект"), "Сформировать список выбора исполнителей", Истина, ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	мПроект = ПолучитьИдентификаторПараметра(Проект, "projects");
	
	Ресурс = "projects/"+мПроект+"/memberships";
	
	Данные = ЗагруженныеДанные.Получить(СтрЗаменить(Ресурс, "/", "-"));
	
	Если Данные = Неопределено Тогда
		Данные = ПолучитьДанныеРесурсаИзТрекера(Ресурс);
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить(СтрЗаменить(Ресурс, "-", "/"), Данные);
	КонецЕсли;
	
	СписокИсполнителей = Новый СписокЗначений;
	СписокИсполнителей.Добавить("<>");
	Для Каждого Структура Из Данные["memberships"] Цикл
		 СписокИсполнителей.Добавить(Структура.user.name);
	КонецЦикла;
	
	ЭлементыФормы.Исполнитель.СписокВыбора	= СписокИсполнителей;
	
КонецПроцедуры


Процедура ЗаполнитьСписокВыбораПравДоступа()
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля() + ", Проект"), "Сформировать список выбора прав доступа",, ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	мПроект = ПолучитьИдентификаторПараметра(Проект, "projects");
	
	//: ЗагруженныеДанные = Новый Соответствие
	Данные = ЗагруженныеДанные.Получить("projects/"+мПроект+"/memberships");
	
	Если Данные = Неопределено Тогда
		Данные = ПолучитьДанныеРесурсаИзТрекера("projects/"+мПроект+"/memberships");
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить("projects/"+мПроект+"/memberships", Данные);
	КонецЕсли;
	
	СписокПрав = Новый СписокЗначений;
	СписокПрав.Добавить(0, "<>");
	Для Каждого Структура Из Данные["memberships"] Цикл
		Для Каждого Право Из  Структура["roles"] Цикл
			Если СписокПрав.НайтиПоЗначению(Право.id) =Неопределено Тогда
				СписокПрав.Добавить(Право.name);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЭлементыФормы.ПравоДоступа.СписокВыбора = СписокПрав;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуНастраиваемыхПолей()
	
	//: ЗагруженныеДанные = Новый Соответствие
	Данные = ЗагруженныеДанные.Получить("custom_fields");
	Если Данные = Неопределено Тогда
		Данные = ПолучитьДанныеРесурсаИзТрекера("custom_fields");
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ЗагруженныеДанные.Вставить("custom_fields", Данные);
	КонецЕсли;
	
	тНастраиваемыеПоля.Очистить();
	Для Каждого Поле Из Данные["custom_fields"] Цикл
		Если Поле.customized_type = "issue" И Поле.Свойство("is_filter") И Поле.is_filter Тогда
			нСтрока = тНастраиваемыеПоля.Добавить();
			
			нСтрока.Идентификатор = Поле.id;
			нСтрока.Имя = Поле.name;
			
			Если Поле.field_format = "string" Тогда
				нСтрока.Значение = "";
			ИначеЕсли Поле.field_format = "bool" Тогда
				Если Поле.Свойство("default_value") Тогда
					нСтрока.Значение = Поле.default_value;
				Иначе
					нСтрока.Значение = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
 КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОВТОРЯЮЩИЕСЯ ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ РАЗНЫХ РЕКВИЗИТОВ

Процедура УстановитьВидимость()
	
	ЭлементыФормы.НадписьПароль.Видимость		= БазоваяАутентификация;
	ЭлементыФормы.Пароль.Видимость				= БазоваяАутентификация;
	ЭлементыФормы.НадписьПользователь.Видимость	= БазоваяАутентификация;
	ЭлементыФормы.Пользователь.Видимость		= БазоваяАутентификация;
	ЭлементыФормы.НадписьAPIkey.Видимость		= Не БазоваяАутентификация;
	ЭлементыФормы.APIkey.Видимость				= Не БазоваяАутентификация;
	ЭлементыФормы.НадписьПодсказка.Видимость	= Не БазоваяАутентификация;
	
	ЭлементыФормы.тНастраиваемыеПоля.Видимость				= тНастраиваемыеПоля.Количество() > 0;
	ЭлементыФормы.РамкаГруппыНастраиваемыеПоля.Видимость	= тНастраиваемыеПоля.Количество() > 0;
	
	ПоказатьСкрытьДполнительнуюПанель();
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.Добавить.Доступность		= УспешнаяИнициализация;
	ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.Изменить.Доступность		= УспешнаяИнициализация;
	ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.ОбновитьСписок.Доступность	= УспешнаяИнициализация;
	
КонецПроцедуры

Процедура УстановитьЗаголовок()
	Заголовок = Заголовок + " v" + ЭтотОбъект.Метаданные().Комментарий;	
КонецПроцедуры


Процедура УстановитьФокус()
	
	Если мТекПозицияВДереве <> Неопределено Тогда
		ПредПозиционирование = ДеревоПроектовЗадач.Строки.Найти(мТекПозицияВДереве, "Идентификатор", Истина);
		Если ПредПозиционирование <> Неопределено Тогда
			ЭлементыФормы.ДеревоПроектовЗадач.ТекущаяСтрока = ПредПозиционирование;
			УстановитьОтборСпискаПоДереву(ПредПозиционирование);
		КонецЕсли;
		
		ПредПозиционирование = СписокЗадач.Найти(мТекПозицияВСписке, "Идентификатор");
		Если ПредПозиционирование <> Неопределено Тогда
			ЭлементыФормы.СписокЗадач.ТекущаяСтрока = ПредПозиционирование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСпискаПоДереву(Знач ТекСтрокаДерева)
	
	сНомеровЗадач = Новый СписокЗначений;
	ПолучитьСписокНомеровПодчиненныхЗадач(ТекСтрокаДерева.Строки, сНомеровЗадач);
	
	Если ТекСтрокаДерева.ИдентификаторПроекта = 0 Тогда
		сНомеровЗадач.Добавить(ТекСтрокаДерева.Идентификатор);		
	КонецЕсли;
	
	ЭлОтбора = ЭлементыФормы.СписокЗадач.ОтборСтрок.Идентификатор;
	ЭлОтбора.ВидСравнения = ВидСравнения.ВСписке;
	ЭлОтбора.Значение = сНомеровЗадач;
	ЭлОтбора.Использование = Истина;
	
	СписокЗадач.Сортировать("ПолеСортировки Возр");

КонецПроцедуры

Процедура УстановитьОписаниеЗадачи(ТекстОписания);
	
	Если ФорматированиеТекста = "none" Тогда // Ничего не конвертируем
		Возврат;
	КонецЕсли;
	
	//TODO: Проверить конвертер Textile в HTML с IE ниже 9-го  
	Попытка
		ЭлементыФормы.ОписаниеЗадачиHTML.Документ.getElementById ("txt").innerHTML = ТекстОписания;
		
		// Посылаем сообщение невидимой кнопке, чтобы выполнить команду JS
		Команда = ЭлементыФормы.ОписаниеЗадачиHTML.Документ.getElementById ("SendEvent");    
		Команда.click("onclick");
		
		// получаем результат из контейнера DIV
		лРез = ЭлементыФормы.ОписаниеЗадачиHTML.Документ.getElementById ("BufferData").innerHTML;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ФорматированиеСтроки(Знач Строка)
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, "-", "");
	
	Возврат ?(Строка="","00010101", Строка);
КонецФункции


Процедура УправлениеОтображениемПанелиПользователя()
	
	Кнопка = ЭлементыФормы.КоманднаяПанельНастройки.Кнопки.Настройки;
	
	Если Кнопка.Пометка тогда
		ЭлементыФормы.ПанельНастроек.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель6.Свертка   = РежимСверткиЭлементаУправления.Нет;
		ШиринаПанели = ЭлементыФормы.ПанельНастроек.Ширина;
		ШиринаПанели = 281;
		Если ШиринаПанели / ЭтаФорма.Ширина > 0.5 тогда
			ШиринаПанели = 281;
			ЭлементыФормы.ПанельНастроек.Ширина = ШиринаПанели;
			ЭлементыФормы.ПанельНастроек.Лево = ЭлементыФормы.Панель.Ширина - 12 - ШиринаПанели - ЭлементыФормы.ДеревоПроектовЗадач.Ширина - 6;
		КонецЕсли;
		ЭлементыФормы.Разделитель6.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПанельНастроек.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель6, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.Разделитель6.Лево = ЭлементыФормы.Панель.Ширина - ШиринаПанели - 6;
		ЭлементыФормы.СписокЗадач.Ширина = ЭлементыФормы.Панель.Ширина - 12 - ШиринаПанели - ЭлементыФормы.ДеревоПроектовЗадач.Ширина - 6;
		ЭлементыФормы.ДополнительнаяПанель	.Ширина = ЭлементыФормы.СписокЗадач.Ширина;
		ЭлементыФормы.Разделитель7.Ширина = ЭлементыФормы.СписокЗадач.Ширина;
	Иначе
		ЭлементыФормы.ПанельНастроек.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.Разделитель6.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельНастроек, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.ПанельНастроек.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.Разделитель6.Свертка  	= РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемДополнительнойПанели()
	
	Кнопка = ЭлементыФормы.КоманднаяПанельСписокЗадач.Кнопки.ПоказатьСкрытьДполнительнуюПанель;
	ВысотаКомПанели = ЭлементыФормы.КоманднаяПанельСписокЗадач.Высота; 
	
	Если Кнопка.Пометка тогда
		ЭлементыФормы.ДополнительнаяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель7.Свертка   = РежимСверткиЭлементаУправления.Нет;
		//ВысотаОписания = ЭлементыФормы.ОписаниеЗадачиHTML.Высота;
		ВысотаОписания = 192;
		Если ВысотаОписания / ЭтаФорма.Высота > 0.5 тогда
			ВысотаОписания = 192;
			ЭлементыФормы.ДополнительнаяПанель.Высота = ВысотаОписания;
			ЭлементыФормы.ДополнительнаяПанель.Верх = ЭлементыФормы.Панель.Высота - 6 - ВысотаОписания - ЭлементыФормы.СписокЗадач.Высота;
		КонецЕсли;
		ЭлементыФормы.Разделитель7.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭтаФорма.Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ДополнительнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель7, ГраницаЭлементаУправления.Низ);
		
		ЭлементыФормы.Разделитель7.Верх = ЭлементыФормы.Панель.Высота - ВысотаОписания - 6 - ВысотаКомПанели - 10;
		ЭлементыФормы.СписокЗадач.Высота = ЭлементыФормы.Панель.Высота - 6 - ВысотаОписания - ВысотаКомПанели - 10 - 38;
	Иначе
		ЭлементыФормы.ДополнительнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.Разделитель7.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ДополнительнаяПанель, ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ДополнительнаяПанель.Свертка	= РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.Разделитель7.Свертка		= РежимСверткиЭлементаУправления.Низ;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьРезультатОтбораСпискаЗадач()
	
	ОтборСтрок = ЭлементыФормы.СписокЗадач.ОтборСтрок; 
	ПостроительЗапроса = Новый ПостроительЗапроса; 
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(СписокЗадач); 
	
	// Добавляются необходимые отборы, такие же как в отборы в табличной части. 
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл 
		Если ЭлементОтбора.Использование Тогда 
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.Имя); 
			НовыйОтбор.Использование = Истина; 
			НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения; // нужный вид сравнения 
			НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС; 
			НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо; 
			НовыйОтбор.Значение = ЭлементОтбора.Значение; 
		КонецЕсли; 
	КонецЦикла; 
	
	ПостроительЗапроса.Выполнить();
	
	Возврат ПостроительЗапроса.Результат; // отобранные строки типа РезультатЗапроса
КонецФункции


Процедура БазоваяАутентификацияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ 

Процедура ТаблицаВложенийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		ЯчейкаСКартинкой = Ячейки["Картинка"];
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		
		// TODO Переделать на использование коллекции картинок и добавить ее в обработку, чтобы не зависило от конфигурации
		Попытка 
			Если ДанныеСтроки["Расширение"] = ".xls" Или ДанныеСтроки["Расширение"] = ".xlsx" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_Excel;
			ИначеЕсли ДанныеСтроки["Расширение"] = ".epf" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_EPF;
			ИначеЕсли ДанныеСтроки["Расширение"] = ".txt" Или ДанныеСтроки["Расширение"] = ".ini" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_TXT;
			ИначеЕсли ДанныеСтроки["Расширение"] = ".cf" Или ДанныеСтроки["Расширение"] = ".dt" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_1С;
			ИначеЕсли ДанныеСтроки["Расширение"] = ".doc" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_Word;
			ИначеЕсли ДанныеСтроки["Расширение"] = ".xml" Тогда
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_XML;
			Иначе
				ЯчейкаСКартинкой.Картинка = БиблиотекаКартинок.ПиктограммаФайла_TXT;
			КонецЕсли;
		Исключение
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаВложенийПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры


Процедура ЗадачиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.ИдентификаторПроекта > 0 Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина,);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗадачиПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаДерева = ЭлементыФормы.ДеревоПроектовЗадач.ТекущиеДанные;
	
	УстановитьОтборСпискаПоДереву(ТекСтрокаДерева);
	
	// Снимаем флажки
	КоманднаяПанельСписокЗадачСнятьФлажки(Неопределено);
	
	мТекПозицияВДереве = ТекСтрокаДерева.Идентификатор;
	
КонецПроцедуры

Процедура ПолучитьСписокНомеровПодчиненныхЗадач(Строки, сНомеров)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		сНомеров.Добавить(СтрокаДерева.Идентификатор);
		
		ПолучитьСписокНомеровПодчиненныхЗадач(СтрокаДерева.Строки, сНомеров)
	КонецЦикла;
	
КонецПроцедуры



Процедура НаблюдателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ДопПоляПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ

Процедура ИдентификаторПроектаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораПроекта();
КонецПроцедуры

Процедура ИдентификаторИсполнителяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораИсполнителей();
КонецПроцедуры

Процедура ИдентификаторПравДоступаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораПравДоступа();
КонецПроцедуры

Процедура СтатусНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)             
	ДопВариантыПолей = Новый Массив;
	ДопВариантыПолей.Добавить("open");
	ДопВариантыПолей.Добавить("closed");
	ДопВариантыПолей.Добавить("*");
	ЗаполнитьСписокВыбораЭлементаФормы(ЭтаФорма, Элемент.Имя, "issue_statuses",, ДопВариантыПолей);
КонецПроцедуры


Процедура ПриоритетНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораЭлементаФормы(ЭтаФорма, Элемент.Имя, "enumerations/issue_priorities", "issue_priorities");
КонецПроцедуры

Процедура ТрекерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораЭлементаФормы(ЭтаФорма, Элемент.Имя, "trackers");
КонецПроцедуры

Процедура ИдентификаторПроектаПриИзменении(Элемент)
	ПерезаполнитьСписокЗапросов();
	ЗаполнитьСписокВыбораИсполнителей();
КонецПроцедуры

Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока.Идентификатор <> 0 Тогда
		ОткрытьФормуЗадачиДляРедактирования(ВыбраннаяСтрока.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаПериодаНажатие(Элемент)
	
	мНастройкаПериода = Новый НастройкаПериода;
	
	мНастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон = Дата('00010101000000'), ДатаКон, КонецДня(ДатаКон)));
	
	Если мНастройкаПериода.Редактировать() Тогда
		
		ДатаНач = мНастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = мНастройкаПериода.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры

Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаСписка = ЭлементыФормы.СписокЗадач.ТекущиеДанные;
	Если ТекСтрокаСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	мНомерЗадачи = Формат(ТекСтрокаСписка.Идентификатор,"ЧГ=0");
	
	Если НастройкиФормы.ПоказатьДполнительнуюПанель Тогда
		УстановитьОписаниеЗадачи(?(ТекСтрокаСписка.Описание = "", СтрЗаменить(ТекСтрокаСписка.Тема, ">", ""), ТекСтрокаСписка.Описание));
	КонецЕсли;
	
	Если ЭлементыФормы.ДополнительнаяПанель.Страницы.История.Раскрыта Тогда
		ВывестиИсториюИзмененийЗадачи(мНомерЗадачи);
	КонецЕсли;
	
	ПолучитьДанныеОЗатраченномВремениПоЗадаче(мНомерЗадачи);
	
	Если мТекПозицияВСписке <> ТекСтрокаСписка.Идентификатор Тогда
		мТекПозицияВСписке = ТекСтрокаСписка.Идентификатор;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиИсториюИзмененийЗадачи(мНомерЗадачи)
	
	ДанныеОЗадаче = ЗагруженныеДанные.Получить("issues/"+мНомерЗадачи);
	
	Если ДанныеОЗадаче = Неопределено Или Не ДанныеОЗадаче["issue"].Свойство("journals") Тогда
		Отборы = "&include=journals";
		ДанныеОЗадаче = ПолучитьДанныеРесурсаИзТрекера("issues/"+мНомерЗадачи, Отборы);
		
		Если ОтчетоВыполнении.ЕстьОшибки Тогда
			Сообщить(ОтчетоВыполнении.ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОЗадаче["issue"]["journals"].Количество() > 0 Тогда
		ПоказатьИсториюИзмененийВHTML(ДанныеОЗадаче["issue"]);		
	КонецЕсли;
	                                                                     	
КонецПроцедуры

Процедура ПолучитьДанныеОЗатраченномВремениПоЗадаче(мНомерЗадачи)
	
	Время = 0;
	
	Параметры = "&issue_id="+мНомерЗадачи;
	ДанныеОВремени = ПолучитьДанныеРесурсаИзТрекера("time_entries", Параметры, Ложь);
	
	Если ОтчетоВыполнении.ЕстьОшибки Тогда
		Сообщить(ОтчетоВыполнении.ТекстОшибки);
	Иначе
		Для Каждого ЗаписьОВремени Из ДанныеОВремени["time_entries"] Цикл
			Время = Время + ЗаписьОВремени["hours"];		
		КонецЦикла;
	КонецЕсли;
	
	УжеЗатрачено = "Уже затрачено: "+Формат(Время, "ЧЦ=10; ЧДЦ=2; ЧГ=0")+" час(ов)";
	
КонецПроцедуры


Процедура ПоказатьИсториюИзмененийВHTML(Задача)
	
	мИзменений = Задача["journals"];
	
	ТелоHTML = "";
	
	н = мИзменений.Количество()-1;
	Пока н >= 0 Цикл
		Изменение = мИзменений[н];
		
		ТелоHTML =  ТелоHTML + "<p>Обновлено <font color=""#0000FF"">"+Изменение["user"].name+": "+Формат(Изменение["created_on"], "ДЛФ=DDT")+" </font></p>" + Символы.ПС;
		
		ТекстДетальныеИзменения = "";
		
		Для Каждого ДетальныеДанные Из Изменение["details"] Цикл
			
			Если ДетальныеДанные["property"]="attr" Тогда
				
				// Попробуем преобразовать в читаемый пользователем вид
				ИмяПараметра			= НайтиСоответствиеПоЗначению(ДетальныеДанные["name"]);
				
				Если ДетальныеДанные.Свойство("old_value") И ДетальныеДанные.Свойство("new_value") Тогда
					ТекстДетальныеИзменения = ТекстДетальныеИзменения +
					"<ul>
					|	<li><font color=""#0000FF""><font color=""#000000"">Параметр <b>"+ИмяПараметра+"</b> изменился "
					+"с <b>" + ДетальныеДанные["old_value"] + "</b> на <b>"+ДетальныеДанные["new_value"]+ "</b></font></font></li>
					|</ul>";
				ИначеЕсли Не ДетальныеДанные.Свойство("old_value") И ДетальныеДанные.Свойство("new_value")  Тогда
					ТекстДетальныеИзменения = ТекстДетальныеИзменения +
					"<ul>
					|	<li><font color=""#0000FF""><font color=""#000000"">Параметр <b>"+ИмяПараметра+"</b> изменился "
					+" на <b>"+ДетальныеДанные["new_value"]+"</b></font></font></li>
					|</ul>";
				ИначеЕсли ДетальныеДанные.Свойство("old_value") И НЕ ДетальныеДанные.Свойство("new_value")  Тогда
					ТекстДетальныеИзменения = ТекстДетальныеИзменения +
					"<ul>
					|	<li><font color=""#0000FF""><font color=""#000000"">Значение <b><strike>"+ ДетальныеДанные["old_value"]
					+ " </b></strike> параметра <b>" + ИмяПараметра+"</b> удалено </font></font></li>
					|</ul>";
				КонецЕсли;
				
				//TODO:Получить имена параметров по идентификатору
				
			ИначеЕсли ДетальныеДанные["property"]<>"atr" Тогда
				Стоп = Истина;
			КонецЕсли;
			
		КонецЦикла;
		ТелоHTML = ТелоHTML + ТекстДетальныеИзменения;
		
		Если Изменение.Свойство("notes") И Изменение["notes"] <> "" Тогда
			ТелоHTML =  ТелоHTML + "<p>Примечание: "+Изменение["notes"]+"</p>" + Символы.ПС
		КонецЕсли;
		
		н=н-1;
	КонецЦикла;
	
	ИсторияИзмененийHTML = 
	"<!DOCTYPE html>
	|<html lang=""en"">
	|<head>
	|    <meta charset=""UTF-8"">
	|    <title>История изменений</title>
	|</head>
	|<body>
	|"+ТелоHTML+"
	|</body>
	|</html>";
	
	ЭлементыФормы.ИсторияИзменений.УстановитьТекст(ИсторияИзмененийHTML);
	
КонецПроцедуры

Функция НайтиСоответствиеПоЗначению(Значение)
	
	Для Каждого КлючИЗначение Из СоответствиеИменПолей Цикл
		Если КлючИЗначение.Значение = Значение Или КлючИЗначение.Значение+"_id" = Значение Тогда
			Возврат КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "<не определен>";
КонецФункции



Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ФормаЗадачи" И ИмяСобытия = "Обновить список задач" Тогда
		
		мТекПозицияВСписке = Параметр;
		КоманднаяПанельСписокЗадачОбновитьСписок(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияПриСтартеПриИзменении(Элемент)
	
	Если НЕ ИнициализацияПриСтарте Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	
	Ответ = Вопрос("Выполнить инициализацию параметров трекера?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВсеРеквизитыЗаполнены(Новый Структура(ОбязательныеПоля())) Тогда
		Возврат;
	КонецЕсли;
	
	Если Инициализация(Истина, Проект) Тогда
		ЗаполнитьСписокВыбораПроекта();
		ПерезаполнитьСписокЗапросов();
		ЗаполнитьТаблицуНастраиваемыхПолей();
	Иначе
		УспешнаяИнициализация = Ложь;
		Сообщить("Не удалось инициализировать парметры трекера, проверьте настройки соединения с трекером!");	
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура ОформлениеЗадачПолеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ПоляОформления = Новый Структура("Трекер, Статус, Приоритет, Исполнитель");
	
	спПолей = Новый СписокЗначений;
	Для Каждого КиЗ Из ПоляОформления Цикл
		спПолей.Добавить(КиЗ.Ключ);
	КонецЦикла;
	
	Элемент.СписокВыбора = спПолей;
	
КонецПроцедуры

Процедура ОформлениеЗадачЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Перем Ресурс;
	
	ПоляОформления = Новый Структура("Трекер, Статус, Приоритет, Исполнитель", 
									"trackers", "issue_statuses", "issue_priorities", "memberships");
									
	ТекСтрока = ЭлементыФормы.ОформлениеЗадач.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или ТекСтрока.Поле = "" Тогда
		Возврат;		
	КонецЕсли;
	
	Если ПоляОформления.Свойство(ТекСтрока.Поле, Ресурс) Тогда
		
		Данные = ЗагруженныеДанные.Получить(Ресурс);
		Если Данные = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		ВариантыВыбора = Новый СписокЗначений;
		Для Каждого Вариант Из Данные[Ресурс] Цикл
			Если Вариант.Свойство("name") Тогда
				ВариантыВыбора.Добавить(Вариант.name);
			Иначе
				ВариантыВыбора.Добавить(Вариант.user.name);	
			КонецЕсли;
		КонецЦикла;
	
		Элемент.СписокВыбора = ВариантыВыбора;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокЗадачПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтрок Из ОформленияСтрок Цикл
		Для Каждого ОформлениеПоля Из ОформлениеЗадач Цикл
			// Оформление
			Если ОформлениеПоля.Использование И ОформлениеПоля.Поле <> "" И ОформлениеСтрок.ДанныеСтроки[ОформлениеПоля.Поле] = СокрЛП(ОформлениеПоля.Значение)Тогда
				ОформлениеСтрок.ЦветФона = ОформлениеПоля.Цвет;
			КонецЕсли;
		КонецЦикла;
		
		// Иерархия задач
		Отступ =  СформироватьОтступДляУровня(ОформлениеСтрок.ДанныеСтроки.Уровень);
		Если ОформлениеСтрок.ДанныеСтроки.Уровень > 1  И Найти(ОформлениеСтрок.ДанныеСтроки.Тема, Отступ) = 0 Тогда
			ОформлениеСтрок.ДанныеСтроки.Тема = Отступ + ОформлениеСтрок.ДанныеСтроки.Тема; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьОтступДляУровня(КоличествоСимволов)
	СтрокаОтступа = "";
	Для н = 1  По КоличествоСимволов Цикл
		СтрокаОтступа = СтрокаОтступа + СимволОтступа;	
	КонецЦикла;
	//СтрокаОтступа = СтрокаОтступа + ">";
	
	Возврат СтрокаОтступа;
КонецФункции


Процедура ОформлениеЗадачЗначениеПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ОформлениеЗадач.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.Использование = ЗначениеЗаполнено(ТекСтрока.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура СерверПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Порт = 80;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеятельностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораЭлементаФормы(ЭтаФорма, Элемент.Имя, "enumerations/time_entry_activities", "time_entry_activities");
КонецПроцедуры

Процедура ПолеСсылкаНаОбъект1СНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	сВыбора = Новый СписокЗначений;
	
	//: ЗагруженныеДанные = Новый Соответствие
	Данные = ЗагруженныеДанные.Получить("custom_fields");
	
	Если Данные = Неопределено Тогда
		ЗаполнитьТаблицуНастраиваемыхПолей();
		
		Данные = ЗагруженныеДанные.Получить("custom_fields");
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из Данные["custom_fields"] Цикл
		Если Поле.customized_type = "issue" Тогда
			сВыбора.Добавить(Поле.name);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.ПолеСсылкаНаОбъект1С.СписокВыбора = сВыбора;
	
КонецПроцедуры

Процедура ФорматированиеТекстаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВариантыФорматированияТекста = Новый СписокЗначений;
	ВариантыФорматированияТекста.Добавить("none");
	ВариантыФорматированияТекста.Добавить("Textile");
	ВариантыФорматированияТекста.Добавить("Markdown");
	
	ЭлементыФормы.ФорматированиеТекста.СписокВыбора = ВариантыФорматированияТекста;
	
КонецПроцедуры

Процедура ФорматированиеТекстаПриИзменении(Элемент)
	
	УстановитьОписаниеЗадачиHTML();
	
КонецПроцедуры

Процедура УстановитьОписаниеЗадачиHTML()
	
	ЭлементыФормы.ОписаниеЗадачиHTML.УстановитьТекст(ПолучитьТекстИнициализацииКовертераВПолеHTML(Истина));

КонецПроцедуры





мСоздатьЗадачу = Ложь;
мРедактироватьЗадачу = Ложь;

мПоказыватьНастройки = Истина;

УспешнаяИнициализация = Истина;

ФорматированиеТекста = "none";

СоответствиеИменПолей = Новый Соответствие;
// Общие поля
СоответствиеИменПолей.Вставить("Идентификатор",       "id");          
СоответствиеИменПолей.Вставить("Описание",            "description");          
// issues
СоответствиеИменПолей.Вставить("Автор",               "author");          
СоответствиеИменПолей.Вставить("Исполнитель",         "assigned_to");          
СоответствиеИменПолей.Вставить("НастраиваемыеПоля",   "custom_fields");          
СоответствиеИменПолей.Вставить("ПроцентВыполнения",   "done_ratio");          
СоответствиеИменПолей.Вставить("ОценкаВремени",		  "estimated_hours");          
СоответствиеИменПолей.Вставить("Приоритет",           "priority");          
СоответствиеИменПолей.Вставить("Проект",              "project");          
СоответствиеИменПолей.Вставить("ДатаНачала",          "start_date");          
СоответствиеИменПолей.Вставить("ДатаСоздания",        "created_on");          
СоответствиеИменПолей.Вставить("ДатаВыполнения",      "due_date");          
СоответствиеИменПолей.Вставить("Статус",              "status");          
СоответствиеИменПолей.Вставить("Тема",                "subject");          
СоответствиеИменПолей.Вставить("ПроектЗадача",        "subject");          
СоответствиеИменПолей.Вставить("Трекер",              "tracker");          
СоответствиеИменПолей.Вставить("НомерРодителя",       "parent");          
// projects
СоответствиеИменПолей.Вставить("НазваниеПроекта",     "name");          
// users
СоответствиеИменПолей.Вставить("Имя",                 "firstname");          
СоответствиеИменПолей.Вставить("Дата авторизации",    "last_login_on");          
СоответствиеИменПолей.Вставить("Фамилия",             "lastname");          
СоответствиеИменПолей.Вставить("Логин",               "login");          
СоответствиеИменПолей.Вставить("Почта",               "mail");
// custom_fields
СоответствиеИменПолей.Вставить("ИмяПоля",             "name");          
СоответствиеИменПолей.Вставить("ТипКастомизации",     "customized_type");          
СоответствиеИменПолей.Вставить("ФорматПоля",          "field_format");          
СоответствиеИменПолей.Вставить("МинДлина",            "min_length");          
СоответствиеИменПолей.Вставить("МаксДлина",           "max_length");
СоответствиеИменПолей.Вставить("ЗначениеПоУмолчанию", "default_value");
СоответствиеИменПолей.Вставить("Видимость",           "visible");
СоответствиеИменПолей.Вставить("Обязательный",        "is_required");
СоответствиеИменПолей.Вставить("Фильтруется",         "is_filter");
СоответствиеИменПолей.Вставить("УчаствуетВПоиске",    "searchable");


